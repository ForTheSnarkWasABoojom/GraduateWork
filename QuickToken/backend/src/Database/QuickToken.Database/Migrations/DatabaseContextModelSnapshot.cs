// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickToken.Database;

#nullable disable

namespace QuickToken.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("QuickToken.Database.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<long>("LastAuthAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("last_auth_at");

                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("roles");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("QuickToken.Database.Models.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetSerialId")
                        .HasColumnType("TEXT")
                        .HasColumnName("asset_serial_id");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("TEXT")
                        .HasColumnName("token_id");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("TEXT")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("AssetSerialId");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.HasIndex("WalletId");

                    b.ToTable("asset", (string)null);
                });

            modelBuilder.Entity("QuickToken.Database.Models.AssetSerial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("BurnTimestamp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("burn_timestamp");

                    b.Property<double>("DailyInterestRate")
                        .HasColumnType("REAL")
                        .HasColumnName("daily_interest_rate");

                    b.Property<long>("IpoTimestamp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ipo_timestamp");

                    b.Property<long>("Price")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("asset_serial", (string)null);
                });

            modelBuilder.Entity("QuickToken.Database.Models.BlockchainTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<string>("Hash")
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<string>("InputPayload")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT")
                        .HasColumnName("input_payload");

                    b.Property<long>("LastUpdateAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("last_update_at");

                    b.Property<string>("OutputPayload")
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT")
                        .HasColumnName("output_payload");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("State");

                    b.ToTable("blockchain_transaction", (string)null);
                });

            modelBuilder.Entity("QuickToken.Database.Models.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("TEXT")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT")
                        .HasColumnName("currency");

                    b.Property<string>("Eth")
                        .HasColumnType("TEXT")
                        .HasColumnName("eth");

                    b.Property<bool>("ForceCacheUpdate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("force_cache_update");

                    b.Property<long?>("LastUpdateAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("last_update_at");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("ForceCacheUpdate");

                    b.HasIndex("LastUpdateAt");

                    b.ToTable("wallet", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10ababc1-36d1-4708-8b0b-a74c8decf66f"),
                            Address = "0xca63bA88e0c6711A3D9177982ea7558d97bA8fBC",
                            ForceCacheUpdate = false
                        });
                });

            modelBuilder.Entity("QuickToken.Database.Models.WalletSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT")
                        .HasColumnName("currency");

                    b.Property<string>("Eth")
                        .HasColumnType("TEXT")
                        .HasColumnName("eth");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("timestamp");

                    b.Property<Guid?>("WalletId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WalletId", "Timestamp");

                    b.ToTable("wallet_snapshot", (string)null);
                });

            modelBuilder.Entity("QuickToken.Database.Models.Asset", b =>
                {
                    b.HasOne("QuickToken.Database.Models.AssetSerial", "AssetSerial")
                        .WithMany("Assets")
                        .HasForeignKey("AssetSerialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickToken.Database.Models.Wallet", "Wallet")
                        .WithMany("Assets")
                        .HasForeignKey("WalletId");

                    b.Navigation("AssetSerial");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("QuickToken.Database.Models.Wallet", b =>
                {
                    b.HasOne("QuickToken.Database.Models.Account", "Account")
                        .WithOne("Wallet")
                        .HasForeignKey("QuickToken.Database.Models.Wallet", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("QuickToken.Database.Models.WalletSnapshot", b =>
                {
                    b.HasOne("QuickToken.Database.Models.Wallet", "Wallet")
                        .WithMany("Snapshots")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("QuickToken.Database.Models.Account", b =>
                {
                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickToken.Database.Models.AssetSerial", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("QuickToken.Database.Models.Wallet", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Snapshots");
                });
#pragma warning restore 612, 618
        }
    }
}
